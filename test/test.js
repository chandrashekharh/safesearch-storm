// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, Start, Stop, Update, Validate, context, diff, getPromise, input, jsonfile, safesearchConfig, startcall, stopcall, updatecall, utils;

  jsonfile = require('jsonfile');

  Start = require('./../src/context').start;

  Stop = require('./../src/context').stop;

  Update = require('./../src/context').update;

  Validate = require('./../src/context').validate;

  Promise = require('bluebird');

  diff = require('deep-diff').diff;

  utils = require('utils')._;

  context = {};

  safesearchConfig = {
    "HAVE_SAFESEARCH": false,
    "SAFESEARCH_POLICY": {
      "filename": "safesearch.policy",
      "encoding": "base64",
      "data": ""
    },
    "SAFESEARCH": false,
    "SAFESEARCH_RESPONSE": false
  };

  input = {
    "baseUrl": "http://192.168.122.246:5000",
    "bInstalledPackages": true,
    "bFactoryPush": false,
    "service": {
      "name": "SafeSearch",
      "config": {}
    }
  };

  input.service.config = safesearchConfig;

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  startcall = function(input) {
    return getPromise().then((function(_this) {
      return function(resp) {
        jsonfile.writeFileSync("/tmp/start-input.json", input, {
          spaces: 2
        });
        return Start(input);
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        return console.log("Start err ", err);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        jsonfile.writeFileSync("/tmp/start-output.json", resp, {
          spaces: 2
        });
        context = {};
        context = utils.extend({}, resp);
        return console.log("result from Start:\n ", JSON.stringify(context));
      };
    })(this)).done;
  };

  stopcall = function() {
    return getPromise().then((function(_this) {
      return function(resp) {
        jsonfile.writeFileSync("/tmp/stop-input.json", context, {
          spaces: 2
        });
        return Stop(context);
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        return console.log("Stop err ", err);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        jsonfile.writeFileSync("/tmp/stop-output.json", resp, {
          spaces: 2
        });
        console.log("result from Stop:\n ", JSON.stringify(resp));
        context = {};
        return context = utils.extend({}, resp);
      };
    })(this)).done;
  };

  updatecall = function() {
    return getPromise().then((function(_this) {
      return function(resp) {
        jsonfile.writeFileSync("/tmp/update-input.json", context, {
          spaces: 2
        });
        return Update(context);
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        return console.log("Update err ", err);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        jsonfile.writeFileSync("/tmp/update-output.json", resp, {
          spaces: 2
        });
        context = {};
        context = utils.extend({}, resp);
        return console.log("result from Update:\n ", JSON.stringify(resp));
      };
    })(this)).done;
  };

  startcall(input);

  setTimeout(updatecall, 20000, input);

  setTimeout(stopcall, 40000, input);

}).call(this);
