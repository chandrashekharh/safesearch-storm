// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, Start, Stop, Update, Validate, assert, async, diff, getCorenovaID, getPromise, isFactory, needle, putConfig, schema_SafeSearch, utils, validate;

  validate = require('json-schema').validate;

  assert = require('assert');

  Promise = require('bluebird');

  async = require('async');

  needle = Promise.promisifyAll(require('needle'));

  utils = require('utils')._;

  diff = require('deep-diff').diff;

  schema_SafeSearch = require('./schema').SafeSearch;

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  Validate = function(config) {
    var checkschema;
    if (!config) {
      throw new Error("Validate SafeSearch - invalid input");
    }
    checkschema = validate(config, schema_SafeSearch);
    console.log('SafeSearch schema validate result: ', checkschema);
    if (!checkschema.valid) {
      throw new Error("SafeSearch schema check failed" + checkschema.valid);
      return false;
    } else {
      return true;
    }
  };

  getCorenovaID = function(baseUrl) {
    return needle.getAsync(baseUrl + "/corenova", {
      json: true
    }).then((function(_this) {
      return function(resp) {
        var corenovaResp;
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        corenovaResp = resp[0].body;
        console.log("corenovaID: ", corenovaResp[0].id);
        return corenovaResp[0].id;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  putConfig = function(baseUrl, id, config) {
    return needle.putAsync(baseUrl + ("/corenova/" + id + "/transform/include"), config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return config;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  isFactory = function(factory, config, flag) {
    if (flag || factory) {
      config.HAVE_SAFESEARCH = false;
      config.SAFESEARCH = false;
      config.SAFESEARCH_RESPONSE = false;
      config.SAFESEARCH_POLICY.data = "";
    } else {
      config.HAVE_SAFESEARCH = true;
      config.SAFESEARCH = true;
      config.SAFESEARCH_RESPONSE = true;
      config.SAFESEARCH_POLICY.data = "Z29vZ2xlCnlhaG9vCmJpbmcK";
    }
    return config;
  };

  Start = function(context) {
    if (!(context.bInstalledPackages && context.service.name && context.service.config)) {
      throw new Error('safesearch-storm.Start missingParams');
    }
    return getPromise().then((function(_this) {
      return function(resp) {
        return isFactory(context.bFactoryPush, context.service.config, false);
      };
    })(this)).then((function(_this) {
      return function(config) {
        return Validate(config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return getCorenovaID(context.baseUrl);
      };
    })(this)).then((function(_this) {
      return function(corenovaID) {
        return putConfig(context.baseUrl, corenovaID, context.service.config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log("SafeSearch START response:\n " + JSON.stringify(resp));
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    if (!(context.bInstalledPackages && context.service.name && context.service.config)) {
      throw new Error('safesearch-storm.Start missingParams');
    }
    return getPromise().then((function(_this) {
      return function(resp) {
        return isFactory(context.bFactoryPush, context.service.config, true);
      };
    })(this)).then((function(_this) {
      return function(config) {
        return Validate(config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return getCorenovaID(context.baseUrl);
      };
    })(this)).then((function(_this) {
      return function(corenovaID) {
        return putConfig(context.baseUrl, corenovaID, context.service.config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log("SafeSearch Corenova STOP response:\n " + JSON.stringify(resp));
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Update = function(context) {
    if (!(context.bInstalledPackages && context.service.name && context.service.config)) {
      throw new Error('safesearch-storm.update missingParams');
    }
    return getPromise().then((function(_this) {
      return function(resp) {
        return isFactory(context.bFactoryPush, context.service.config, false);
      };
    })(this)).then((function(_this) {
      return function(config) {
        return Validate(config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return getCorenovaID(context.baseUrl);
      };
    })(this)).then((function(_this) {
      return function(corenovaID) {
        return putConfig(context.baseUrl, corenovaID, context.service.config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log("SafeSearch Corenova UPDATE response:\n " + JSON.stringify(resp));
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  module.exports.start = Start;

  module.exports.stop = Stop;

  module.exports.update = Update;

  module.exports.validate = Validate;

}).call(this);
